#COMPILE EXE
#DIM ALL
#DEBUG ERROR ON
'
#TOOLS OFF
'
' include the common display library
#INCLUDE "win32api.inc"
'
#INCLUDE "CommonDisplay.inc"
'
#INCLUDE "PB_Excel.inc"           ' generated by COM browser
#INCLUDE "PB_Excel_functions.inc" ' helper functions
'
' define the name of the excel spreadsheet to open
$ExcelFile = "Test_spreadsheet.xlsx"
'
FUNCTION PBMAIN () AS LONG
' the main PB function that is the first to be executed
  funPrepOutput("Excel Spreadsheets",0,0,40,120)
  '
  funLog("Excel Spreadsheets")
  '
  'funProcessExcelSpreadsheet(EXE.PATH$ & $ExcelFile)
  'funInsertDataIntoExcel(EXE.PATH$ & $ExcelFile)
  '
  TRY
    KILL EXE.PATH$ & "Updated.xlsx"
  CATCH
  FINALLY
  END TRY
  '
  funRemoveHeaders(EXE.PATH$ & $ExcelFile)
  '
  TRY
    KILL EXE.PATH$ & "BalanceUpdated.xlsx"
  CATCH
  FINALLY
  END TRY
  '
  ' new add new column and populate it
  funAddNewColumn(EXE.PATH$ & "Updated.xlsx")
  '
  funWait()
  '
END FUNCTION
'
FUNCTION funAddNewColumn(strFileName AS STRING) AS LONG
' add a new column to the spreadsheet
  ' define the objects we will be using
  LOCAL oExcelApp       AS Int__Application
  LOCAL oExcelWorkbook  AS Int__Workbook
  LOCAL oExcelWorkSheet AS Int__Worksheet
  '
  LOCAL strError AS STRING         ' contains error description
  LOCAL lngSheet AS LONG           ' the current sheet number on the workbook
  LOCAL lngColumn AS LONG          ' column number of cell
  LOCAL lngRow AS LONG             ' row number of cell
  LOCAL lngR AS LONG               ' used to build data to insert
  LOCAL strData AS STRING          ' data to be put on row
  LOCAL strNewFilename AS STRING   ' name of new workbook
  LOCAL lngFileFormat AS LONG      ' format of the new workbook
  LOCAL lngMaxColumns AS LONG      ' max columns to search
  LOCAL lngMaxRows AS LONG         ' max rows to search
  LOCAL lngColumnStarter AS LONG   ' column to determine active rows
  '
  IF ISTRUE funOpenExcelApp(oExcelApp, strError) THEN
    funLog("Excel opened successfully")
    '
    IF ISTRUE funOpenExcelWorkbook(oExcelApp,oExcelWorkbook, _
                                   strFileName,strError) THEN
      funLog("Workbook opened ok")
      '
      lngSheet = 1  ' set to first sheet
      '
      IF ISTRUE funOpenExcelWorksheet(oExcelApp,oExcelWorkbook, _
                                      oExcelWorkSheet,lngSheet, _
                                      strError) THEN
      ' worksheet opened successfully
        lngRow = 1           ' start on row 1
        lngMaxColumns = 256  ' limit to 256 columns
        ' find the first blank column
        lngColumn = funFindFirstExcelBlankColumn(oExcelWorkSheet, _
                                   lngRow , _
                                   lngMaxColumns)
        strData = "Account Balance"  ' define new header
        IF ISTRUE funAddValueToExcelCell(oExcelWorkSheet,lngRow, _
                                         lngColumn,strData, _
                                         strError) THEN
          funLog("Column header added")
          '
          ' populate the new column
          lngColumnStarter = 1 ' determine which columns to include
          lngMaxRows = 256     ' max rows to search
          lngRow = funFindFirstExcelBlankRow(oExcelWorkSheet, _
                                             lngColumnStarter, _
                                             lngMaxRows)
          IF lngRow > 0 THEN
            DECR lngRow  ' move back to last filled row
            funLog("Inserting up to " & FORMAT$(lngRow))
            '
            ' build up values to insert later
            strData = ""
            FOR lngR = 2 TO lngRow
              strData += FORMAT$((RND(10000,50000))/100) & $CRLF
            NEXT lngR
            '
            ' trim off trailing $crlf
            strData = RTRIM$(strData,$CRLF)
            CLIPBOARD RESET
            CLIPBOARD SET TEXT strData
            '
            lngRow = 2 ' start below header line
            IF ISTRUE funPasteIntoExcelFromClipboard(oExcelWorkSheet, _
                                        lngRow,lngColumn, _
                                        strError) THEN
            ' pasted succesfully
              funLog("Data pasted to spreadsheet")
            '
            ELSE
            ' unable to paste
              funLog("unable to paste " & strError)
            END IF
          ELSE
            funLog("Row Count not returned")
          END IF
          '
          ' save the updated workbook
          strNewFilename = EXE.PATH$ & "BalanceUpdated.xlsx"
          lngFileFormat = %XlFileFormat.xlOpenXMLWorkbook
          '
          IF ISTRUE funSaveExcelWorkSheet(oExcelWorkSheet, _
                                          strNewFilename, _
                                          lngFileFormat, _
                                          strError) THEN
            funLog("Worksheet saved successfully")
          ELSE
          ' unable to save
            funLog("unable to save Worksheet " & strError)
          END IF
          '
        ELSE
          funLog("Unable to add column header " & strError)
        END IF
      '
      ELSE
      ' worksheet not loaded
        funLog("unable to load worksheet " & strError)
      END IF
      '
    ELSE
      funLog("unable to open workbook " & strError)
    END IF
    '
    funCloseExcelApp(oExcelApp,oExcelWorkbook,oExcelWorkSheet)
    '
  ELSE
    funLog("Unable to open Excel " & strError)
  END IF
  '
END FUNCTION

'
FUNCTION funRemoveHeaders(strFileName AS STRING) AS LONG
' insert some data into the existing spreadsheet
  ' define the objects we will be using
  LOCAL oExcelApp       AS Int__Application
  LOCAL oExcelWorkbook  AS Int__Workbook
  LOCAL oExcelWorkSheet AS Int__Worksheet
  '
  LOCAL strError AS STRING         ' contains error description
  LOCAL lngSheet AS LONG           ' the current sheet number on the workbook
  LOCAL lngColumn AS LONG          ' column number of cell
  LOCAL lngRow AS LONG             ' row number of cell
  LOCAL strData AS STRING          ' data to be put on row
  LOCAL strNewFilename AS STRING   ' name of new workbook
  LOCAL lngFileFormat AS LONG      ' format of the new workbook
  '
  LOCAL strRange AS STRING         ' define the range of rows to delete
  '
  IF ISTRUE funOpenExcelApp(oExcelApp, strError) THEN
    funLog("Excel opened successfully")
    '
    IF ISTRUE funOpenExcelWorkbook(oExcelApp,oExcelWorkbook, _
                                   strFileName,strError) THEN
      funLog("Workbook opened ok")
      '
      lngSheet = 1  ' set to first sheet
      '
      IF ISTRUE funOpenExcelWorksheet(oExcelApp,oExcelWorkbook, _
                                      oExcelWorkSheet,lngSheet, _
                                      strError) THEN
      ' worksheet opened successfully
        funLog("WorkSheet opened successfully")
        '
        ' now remove the headers and then save the spreadsheet
        '
        strRange = "A1:A3"  ' set the range of rows to delete
        '
        IF ISTRUE funDeleteExcelRows(oExcelWorkSheet, strRange, _
                                     strError) THEN
          funLog("Rows deleted")
          '
          ' insert new column into sheet 1
          strRange = "E1" ' set the range to insert at
          IF ISTRUE funInsertExcelColumn(oExcelWorkSheet, strRange, _
                                         strError) THEN
            funLog("New column inserted")
            '
          ELSE
            funLog("Unable to insert new column " & strError)
          END IF
          '
          ' insert new row into sheet 1
          strRange = "A5" ' set the range to insert at
          IF ISTRUE funInsertExcelRow(oExcelWorkSheet, strRange, _
                                      strError) THEN
            funLog("New row inserted")
            '
          ELSE
            funLog("Unable to insert new row " & strError)
          END IF
          '
          ' save the updated workbook
          strNewFilename = EXE.PATH$ & "Updated.xlsx"
          lngFileFormat = %XlFileFormat.xlOpenXMLWorkbook
          '
          IF ISTRUE funSaveExcelWorkSheet(oExcelWorkSheet, _
                                          strNewFilename, _
                                          lngFileFormat, _
                                          strError) THEN
            funLog("Worksheet saved successfully")
          ELSE
          ' unable to save
            funLog("unable to save Worksheet " & strError)
          END IF
          '
        ELSE
          funLog("Failure to delete rows. " & strError)
        END IF
        '
      ELSE
      ' worksheet not loaded
        funLog("unable to load worksheet " & strError)
      END IF
      '
    ELSE
      funLog("unable to open workbook " & strError)
    END IF
    '
    funCloseExcelApp(oExcelApp,oExcelWorkbook,oExcelWorkSheet)
    '
  ELSE
    funLog("Unable to open Excel " & strError)
  END IF



END FUNCTION
'
FUNCTION funInsertDataIntoExcel(strFileName AS STRING) AS LONG
' insert some data into the existing spreadsheet
  ' define the objects we will be using
  LOCAL oExcelApp       AS Int__Application
  LOCAL oExcelWorkbook  AS Int__Workbook
  LOCAL oExcelWorkSheet AS Int__Worksheet
  '
  LOCAL strError AS STRING         ' contains error description
  LOCAL lngSheet AS LONG           ' the current sheet number on the workbook
  LOCAL lngColumn AS LONG          ' column number of cell
  LOCAL lngRow AS LONG             ' row number of cell
  LOCAL strData AS STRING          ' data to be put on row
  LOCAL strNewFilename AS STRING   ' name of new workbook
  LOCAL lngFileFormat AS LONG      ' format of the new workbook
  LOCAL lngMaxRows AS LONG         ' maximum number of rows to check for blank row
  '
  IF ISTRUE funOpenExcelApp(oExcelApp, strError) THEN
    funLog("Excel opened successfully")
    '
    IF ISTRUE funOpenExcelWorkbook(oExcelApp,oExcelWorkbook, _
                                   strFileName,strError) THEN
      funLog("Workbook opened ok")
      '
      lngSheet = 1  ' set to first sheet
      '
      IF ISTRUE funOpenExcelWorksheet(oExcelApp,oExcelWorkbook, _
                                      oExcelWorkSheet,lngSheet, _
                                      strError) THEN
      ' worksheet opened successfully
        funLog("WorkSheet opened successfully")
        '
        ' now find the row to add to
        lngColumn = 1     ' column number to check
        lngMaxRows = 300  ' number of rows to check before giving up
        '
        lngRow = funFindFirstExcelBlankRow(oExcelWorkSheet, _
                                           lngColumn, _
                                           lngMaxRows)
        IF lngRow > 0 THEN
          funLog("Adding to row " & FORMAT$(lngRow))
          '
          strData = "Tom|Jones|92 Any Street, Any Town|" & _
                    "0561 0146 7092|Blue|O RhD negative (O-)"
          IF ISTRUE funAddRowToExcel(oExcelWorkSheet, lngRow, strData, strError) THEN
            funLog("Data row added")
            '
            ' now save the spreadsheet
            strNewFilename = EXE.PATH$ & "Updated.xlsx"
            lngFileFormat = %XlFileFormat.xlOpenXMLWorkbook
            '
            IF ISTRUE funSaveExcelWorkSheet(oExcelWorkSheet, _
                                            strNewFilename, _
                                            lngFileFormat, _
                                            strError) THEN
              funLog("Worksheet saved successfully")
            ELSE
            ' unable to save
              funLog("unable to save Worksheet " & strError)
            END IF
            '
          ELSE
            funLog("Unable to add data " & strError)
          END IF
          '
        ELSE
          funLog("Unable to find blank row")
        END IF
        '
      ELSE
      ' worksheet not loaded
        funLog("unable to load worksheet " & strError)
      END IF
      '
    ELSE
      funLog("unable to open workbook " & strError)
    END IF
    '
    funCloseExcelApp(oExcelApp,oExcelWorkbook,oExcelWorkSheet)
    '
  ELSE
    funLog("Unable to open Excel " & strError)
  END IF
  '
END FUNCTION
'
FUNCTION funProcessExcelSpreadsheet(strFileName AS STRING) AS LONG
' load the excel spreadsheet
  ' define the objects we will be using
  LOCAL oExcelApp       AS Int__Application
  LOCAL oExcelWorkbook  AS Int__Workbook
  LOCAL oExcelWorkSheet AS Int__Worksheet
  '
  LOCAL strError AS STRING
  LOCAL lngSheet AS LONG
  LOCAL lngFileFormat AS LONG
  '
  IF ISTRUE funOpenExcelApp(oExcelApp, strError) THEN
    funLog("Excel opened successfully")
    '
    IF ISTRUE funOpenExcelWorkbook(oExcelApp,oExcelWorkbook, _
                                   strFileName,strError) THEN
      funLog("Workbook opened ok")
      '
      ' count how many worksheets are in this workbook
      funLog("Sheet Count = " & _
             FORMAT$(funGetWorksheetCount(oExcelWorkbook)))
      '
      lngSheet = 1  ' set to first sheet
      '
      IF ISTRUE funOpenExcelWorksheet(oExcelApp,oExcelWorkbook, _
                                      oExcelWorkSheet,lngSheet, _
                                      strError) THEN
                                      '
        ' worksheet loaded ok
        ' get the name of this worksheet
        funLog("Worksheet Name = " & _
               funGetCurrentWorksheetName(oExcelWorkSheet))
               '
        ' define the name of the output file
        strFilename = EXE.PATH$ & "Output.csv"
        '
        TRY
          KILL strFileName
        CATCH
        FINALLY
        END TRY
        '
        ' specify CSV windows file format
        lngFileFormat = %XlFileFormat.xlCSVWindows
        '
        IF ISTRUE funSaveExcelWorkSheet(oExcelWorkSheet, _
                                        strFilename, _
                                        lngFileFormat, _
                                        strError) THEN
          funLog("Worksheet saved successfully")
        ELSE
        ' unable to save
          funLog("unable to save Worksheet " & strError)
        END IF
        '
      ELSE
      ' worksheet not loaded
        funLog("unable to load worksheet " & strError)
      END IF
      '
    ELSE
      funLog("unable to open workbook " & strError)
    END IF
    '
    funCloseExcelApp(oExcelApp,oExcelWorkbook,oExcelWorkSheet)
    '
  ELSE
    funLog("Unable to open Excel " & strError)
  END IF
  '
END FUNCTION
